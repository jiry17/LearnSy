#!/usr/bin/env python3

import os
import argparse

src_path = "SOURCEPATH"
interactive_exe = os.path.join(src_path, "build", "executor", "run_interactive")
non_interactive_exe = os.path.join(src_path, "build", "executor", "run_non_interactive")
model_path = os.path.join(src_path, "runner", "model")
tests_path = os.path.join(src_path, "tests")

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--benchmark', type=str, required=True)
    parser.add_argument('--output', type=str, default=None)
    parser.add_argument('--dataset', type=str, required=True, choices=["IS", "IR", "CS", "CI", "CB"])
    parser.add_argument('--solver', type=str, required=True, choices=["eusolver", "maxflash", "polygen", "intsy"])
    parser.add_argument('--selector', type=str, default="learnsy",
                        choices=["learnsy", "randomsy", "samplesy", "default", "biased", "significant"])
    parser.add_argument('--sample-time', type=int, default=120)
    parser.add_argument('--uniform', dest='uniform', action='store_true')
    parser.set_defaults(uniform=False)
    parser.add_argument('-f', '--flatten', type=int, default=None)
    return parser.parse_args()

def check_valid_setting(dataset_name, solver_name, selector_name):
    dataset_info = {"IR": (["intsy"], ["learnsy", "randomsy", "samplesy"]),
                    "IS": (["intsy"], ["learnsy", "randomsy", "samplesy"]),
                    "CI": (["eusolver", "polygen"], ["learnsy", "default"]),
                    "CS": (["eusolver", "maxflash"], ["learnsy", "default", "significant"]),
                    "CB": (["eusolver"], ["learnsy", "default", "biased"])}
    if solver_name in dataset_info[dataset_name][0] and selector_name in dataset_info[dataset_name][1]:
        return
    print("Cannot run selector", selector_name, "on dataset", dataset_name, "with solver", solver_name)

def get_dataset_dir(dataset_name):
    convert_map = {"IR": "repair", "IS": "string-interactive", "CI": "clia", "CS": "string", "CB": "bv"}
    return convert_map[dataset_name]

def get_model_name(dataset_name, solver_name):
    if solver_name == "intsy":
        return "intsy_" + ("string" if dataset_name == "IS" else "repair")
    return solver_name + "_" + get_dataset_dir(dataset_name)

def run_interactive():
    benchmark_path = os.path.join(tests_path, get_dataset_dir(dataset), args.benchmark + ".sl")
    command = [interactive_exe, "--benchmark=" + benchmark_path, "--selector=" + selector]
    if selector == "samplesy":
        command += ["--sample_time=" + str(args.sample_time)]
    if selector == "learnsy":
        if args.flatten is not None:
            command += ["--flatten=" + str(args.flatten)]
        if not args.uniform:
            command += ["--model=" + os.path.join(model_path, get_model_name(dataset, solver))]
    if args.output is not None:
        command += ["--output=" + str(args.output)]
    os.system(" ".join(command))

def run_non_interactive():
    benchmark_path = os.path.join(tests_path, get_dataset_dir(dataset), args.benchmark + ".sl")
    command = [non_interactive_exe, "--benchmark=" + benchmark_path, "--solver=" + solver, "--selector=" + selector]
    if selector == "learnsy":
        if args.flatten is not None:
            command += ["--flatten=" + str(args.flatten)]
        if not args.uniform:
            command += ["--model=" + os.path.join(model_path, get_model_name(dataset, solver))]
    if args.output is not None:
        command += ["--output=" + str(args.output)]
    os.system(" ".join(command))

if __name__ == "__main__":
    args = parse_args()

    dataset, solver, selector = args.dataset, args.solver, args.selector
    check_valid_setting(dataset, solver, selector)

    if solver == "intsy":
        run_interactive()
    else:
        run_non_interactive()

